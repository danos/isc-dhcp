Description: When DHCP server opens RAW sockets for receiving and sending packets,
             it also opens a backup socket(called the "fallback interface"). The
             fallback interface lets the server send from a real IP adddress,
             while the packet interface (RAW socket) sends from all-zeros. In
             the case of a DHCP server and DHCP clients are directly connected,
             DHCP clients send RENEW REQUEST to the DHCP server, the DHCP server
             sends ACK to DHCP clients using "fallback interface"(UDP socket).
             UDP socket has poorer performance than RAW socket. When 10,000 DHCP
             clients send RENEW REQUEST to DHCP server at the same time, DHCP
             server spits out error like "Failed to send 301 byte long packet...".
             Using RAW socket to send ACK in response to RENEW REQUEST improves
             the performance and DHCP server can handle 10,000 RENEW REQUESTs at
             the same time.
Author: Vyatta Package Maintainers <DL-vyatta-help@att.com>

--- a/configure.ac
+++ b/configure.ac
@@ -226,6 +226,14 @@
 		[Define to 1 to use the standard BSD socket API.])
 fi
 
+AC_ARG_ENABLE(use_fallback_sockets_renew_ack,
+        AS_HELP_STRING([--enable-use-fallback-sockets-renew-ack],[enable use of fallback sockets sending ack packets in response to renew packets (default is no)]))
+
+if test "$enable_use_fallback_sockets_renew_ack" = "yes"; then
+        AC_DEFINE([USE_FALLBACK_SOCKETS_RENEW_ACK], [1],
+                [Define to 1 to use fallback sockets sending ack packets in response to renew packets.])
+fi
+
 # Include the PID in the log messages.  This is useful when there may
 # be multiple instances of a program.
 # This is off by default
--- a/server/dhcp.c
+++ b/server/dhcp.c
@@ -4016,6 +4016,7 @@
 			return;
 		}
 
+#ifdef USE_FALLBACK_SOCKETS_RENEW_ACK
 	/* If the client is RENEWING, unicast to the client using the
 	   regular IP stack.  Some clients, particularly those that
 	   follow RFC1541, are buggy, and send both ciaddr and server
@@ -4052,6 +4053,7 @@
 			lease -> state = (struct lease_state *)0;
 			return;
 		}
+#endif
 
 	/* If it comes from a client that already knows its address
 	   and is not requesting a broadcast response, and we can
